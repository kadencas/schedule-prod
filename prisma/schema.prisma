generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model companies {
  id                String          @id @default(uuid())
  name              String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  custom_roles      custom_roles[]
  work_shifts       work_shifts[]
  entity_shifts entity_shifts[]
  time_off_requests time_off_requests[]
  users             users[]
  invitations  Invitation[]  @relation("CompanyInvitations")
}

model custom_roles {
  id          String     @id @default(uuid())
  name        String     @unique
  description String
  permissions Json       @default("{}")
  companyId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  companies   companies  @relation(fields: [companyId], references: [id])
  users       users[]
}

model time_off_requests {
  id                                        String        @id @default(uuid())
  employeeId                                String
  managerId                                 String?
  companyId                                 String
  startDate                                 DateTime
  endDate                                   DateTime
  status                                    RequestStatus @default(PENDING)
  type                                      TimeOffType
  reason                                    String?
  createdAt                                 DateTime      @default(now())
  updatedAt                                 DateTime      @default(now()) @updatedAt
  companies                                 companies     @relation(fields: [companyId], references: [id])
  users_time_off_requests_employeeIdTousers  users         @relation("time_off_requests_employeeIdTousers", fields: [employeeId], references: [id])
  users_time_off_requests_managerIdTousers   users?        @relation("time_off_requests_managerIdTousers", fields: [managerId], references: [id])
}

model users {
  id             String        @id @default(uuid())
  email          String        @unique
  name           String
  role           Role          @default(EMPLOYEE)
  companyId      String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @default(now()) @updatedAt
  customRoleId   String?
  passwordHash   String?
  department     String        @default("N/A")
  location       String        @default("N/A")
  hoursAllowed   Float         @default(40.0)
  work_shifts    work_shifts[]
  custom_roles   custom_roles? @relation(fields: [customRoleId], references: [id])
  
  // Opposite field for companies.users relation.
  company        companies?    @relation(fields: [companyId], references: [id])
  
  // Opposite fields for time_off_requests relations.
  time_off_requests_as_employee time_off_requests[] @relation("time_off_requests_employeeIdTousers")
  time_off_requests_as_manager  time_off_requests[] @relation("time_off_requests_managerIdTousers")
}

model work_shifts {
  id                String    @id @default(uuid())
  userId            String
  companyId         String
  shiftDate         DateTime  // Date for the first occurrence of the shift
  startTime         DateTime  // Start time of the shift
  endTime           DateTime  // End time of the shift
  isRecurring       Boolean   @default(false)
  recurrenceRule    String?   // e.g., "FREQ=WEEKLY;BYDAY=MO,WE,FR"
  recurrenceEndDate DateTime? // Optional: when the recurrence stops
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt
  
  companies         companies @relation(fields: [companyId], references: [id])
  users             users     @relation(fields: [userId], references: [id])
  segments          segments[]
}

model entity_shifts {
  id                String    @id @default(uuid())
  entityId          String
  companyId         String
  shiftDate         DateTime  // Date for the first occurrence of the shift
  startTime         DateTime  // Start time of the shift
  endTime           DateTime  // End time of the shift
  isRecurring       Boolean   @default(false)
  recurrenceRule    String?   // e.g., "FREQ=WEEKLY;BYDAY=MO,WE,FR"
  recurrenceEndDate DateTime? // Optional: when the recurrence stops
  notes             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now()) @updatedAt

  companies         companies @relation(fields: [companyId], references: [id])
  entities          entities  @relation(fields: [entityId], references: [id])
  segments          segments[]
}


model segments {
  id          String     @id @default(uuid())
  shiftId     String
  entityId    String?
  segmentType String     // e.g., 'meeting', 'lunch', 'deepwork'
  location    String
  startTime   DateTime   // When the segment starts
  endTime     DateTime   // When the segment ends
  notes       String?
  entityShiftId String?
  color       String     @default("#FFFFFF")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  
  work_shifts work_shifts @relation(fields: [shiftId], references: [id])
  entity_shifts entity_shifts? @relation(fields: [entityShiftId], references: [id])
  entities    entities?   @relation(fields: [entityId], references: [id])
}

model entities {
  id              String    @id @default(uuid())
  name            String    @unique // e.g., "Circulation Desk", "Shelving"
  type            EntityType // ENUM: LOCATION or TASK
  icon            String?
  color           String?
  companyId       String
  requiresCoverage Boolean   @default(false) // If true, alerts are triggered when empty
  minCoverage     Int?       // Optional: Minimum number of staff required
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now()) @updatedAt

  entity_shifts   entity_shifts[]
  segments        segments[] // One entity can have many segments assigned
}

model Invitation {
  id           Int                @id @default(autoincrement())
  token        String             @unique
  companyId    String             // Changed from Int to String
  inviteeEmail String?            // Optional: restrict the invitation to a specific email if needed
  expiresAt    DateTime
  status       InvitationStatus   @default(PENDING)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relation to companies model with explicit relation name.
  company      companies          @relation("CompanyInvitations", fields: [companyId], references: [id])
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
}

enum Role {
  SUPER_ADMIN
  COMPANY_ADMIN
  MANAGER
  TEAM_LEAD
  EMPLOYEE
  CONTRACTOR
  INTERN
  PART_TIME
  REMOTE
}

enum TimeOffType {
  VACATION
  SICK
  PERSONAL
}

enum InvitationStatus {
  PENDING
  USED
  EXPIRED
}

enum EntityType {
  TASK
  STATION
}
